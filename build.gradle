/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'pairingstation3' at '29/10/15 11:54' with Gradle 2.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0.1'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'liberty'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    mavenCentral()
}

configurations {
 derby
}

// In this section you declare the dependencies for your production and test code
dependencies {

       compile project(":catastrophe-interfaces")
       // We assume this has been built locally and is in a maven cache 
       providedCompile 'liberty-consul:consul.api:1.0.0'
       providedCompile group:'javax.servlet', name:'javax.servlet-api', version:'3.1.0'
       providedCompile group:'javax.ws.rs', name:'javax.ws.rs-api', version: '2.0.1'
       providedCompile group:'javax.enterprise', name:'cdi-api', version:'1.2'
       providedCompile group:'javax.json', name:'javax.json-api', version:'1.0'
       providedCompile group:'javax.transaction', name:'jta', version:'1.1'
       providedCompile group:'org.eclipse.persistence', name:'javax.persistence', version:'2.0.0'
       providedCompile group:'com.ibm.websphere.appserver.api', name:'com.ibm.websphere.appserver.api.json', version:'1.0'
}

liberty {

    installDir = buildDir.path + '/wlp/'
    userDir = projectDir.path + '/usr/'
    serverName = project.name

    features {
        name = [projectDir.path + '/../sample.consulservicediscovery/consul-user-feature/consul-discovery/target/consulDiscovery_1.0.0.esa']
        acceptLicense = true

    } 

    packageLiberty {
        include = 'usr'
        archive = buildDir.path + '/servers/packagedServer.zip'
    }

    // Make sure there's a place for the server to go
    new File(buildDir.path + '/servers/').mkdirs()
}

task deployToLiberty(type: Copy, dependsOn: ['war']) {
    from war.archivePath 
    into "${liberty.userDir}/servers/${liberty.serverName}/apps"

}

task deployDependenciesToLiberty() << {
   String derbyDir = "${liberty.userDir}/shared/resources/derby"
   new File(derbyDir).mkdirs();
      configurations.derby.resolve().each { file ->
        //Copy the file to the desired location
        copy {
          from file 
          into derbyDir
          // Strip off version numbers
          rename '(.+)-[\\.0-9]+\\.(.+)', '$1.$2'
        }
      }
      
      // Also copy across the configuration 
      // We want this in the server we run locally, but not the one on Bluemix
      // This isn't the prettiest way of getting that effect, but ... 
      copy {
        from "${liberty.userDir}/servers/${liberty.serverName}/local-config/jpa.xml" 
        into "${liberty.userDir}/servers/${liberty.serverName}"
      }
}



installFeature.mustRunAfter installLiberty
libertyPackage.mustRunAfter installFeature
libertyPackage.mustRunAfter deployToLiberty
deployToLiberty.mustRunAfter installLiberty

task packageServer(dependsOn: ['installLiberty', 'installFeature', 'deployToLiberty', 'libertyPackage' ]) {
}

task packageLocalServer(dependsOn: ['installLiberty', 'installFeature', 'deployToLiberty', 'deployDependenciesToLiberty', 'libertyPackage' ]) {
   // Tidy up the jpa.xml file 
   delete "${liberty.userDir}/servers/${liberty.serverName}/jpa.xml" 
}

